#!/usr/bin/env python3

import os
from platform import machine, system
from subprocess import run
import argparse
from multiprocessing import cpu_count

os_family = system().lower()
if os_family != "linux":
    from psutil import virtual_memory

usage = """Usage: qe [image] (script options) (other qemu params)

Wrapper for qemu to simplify VM launching from command line
It provides automatic image type detection, enables UEFI and acceleration if possible and provides some additional niceties, see below

Additional script parameters:

-p               enable port forwarding
-u               select USB device (not implemented yet, TODO)
-f               FAT folder, read only (not implemented yet, TODO)
-n               dry run
-i --make-iso    Makes and mounts ISO from folder of file
-l --no-efi      run without OVMF
--help           display this help message

You can also use all available qemu-system-x86_64 parameters"""

parser = argparse.ArgumentParser()
parser.add_argument(
    "-i",
    "--make-iso",
    type=str,
    help="Makes and mounts ISO from folder of file",
)
parser.add_argument(
    "-p",
    "--ports-passthrough",
    action="store_true",
    help="Enables port forwarding for ssh and http",
)
parser.add_argument(
    "-l",
    "--no-efi",
    "--legacy",
    action="store_true",
    help="Boot in legacy mode",
)
parser.add_argument(
    "-n",
    "--dry-run",
    action="store_true",
    help="Generate and show qemu command without running",
)
parser.add_argument(
    "-s",
    "--snapshot",
    action="store_true",
    help="Run VM in without saving any changes",
)
argparsed, not_argparsed = parser.parse_known_args()
not_argparsed = [parser.prog] + not_argparsed

if argparsed.make_iso:
    to_pack = argparsed.make_iso
    to_mount = to_pack + ".iso"
    if not os.path.exists(to_mount):
        # depends on genisoimage package, make sure to install it first
        run(
            [
                "mkisofs",
                "-output-charset",
                "utf-8",
                "-o",
                to_mount,
                to_pack,
                "-V",
                to_pack,
            ]
        )
    not_argparsed += [to_mount]

options = ["-u", "-f"]

if len(not_argparsed) < 2 or "--help" in not_argparsed:
    print(usage)
    exit()

sudo = []
formats = {
    "iso": "raw",
    "qcow2": "qcow2",
    "qed": "qed",
    "raw ": "raw ",
    "img": "raw",
    "vdi": "vdi",
    "vhd": "vpc",
    "vhdx": "vhdx",
    "vmdk": "vmdk",
    "vdi.vtoy": "vdi",
    "vhd.vtoy": "vpc",
}


def is_image(s):
    return bool(sum((s.endswith(e) or s.startswith("/dev/")) for e in formats.keys()))


def invert_bools(func):
    def wrapper(*args, **kwargs):
        return not func(*args, **kwargs)

    return wrapper


is_not_image = invert_bools(is_image)

disk_images = list(filter(is_image, not_argparsed[1:]))
other_args = list(filter(is_not_image, not_argparsed[1:]))
qemu_args = [e for e in other_args if e not in options]
drive = []
for i, image in enumerate(disk_images):
    if image.startswith("/dev/"):
        sudo = ["sudo"]
    media = "cdrom" if image.endswith(".iso") else "disk"
    format = [e for k, e in formats.items() if image.endswith(k)][0]
    drive += ["-drive", f"file={image},format={format},index={i},media={media}"]

if "-m" not in not_argparsed:
    if os_family == "windows":
        mem = int(virtual_memory()[0] / 1024 / 1024 / 1024 * 0.4)
    elif os_family == "linux":
        with open("/proc/meminfo") as f:
            mem = int(
                int(
                    next(
                        (
                            int(line.split()[1])
                            for line in f
                            if line.startswith("MemTotal")
                        )
                    )
                )
                / 1024
                / 1024
                * 0.4
            )
    mem = 4 if mem > 4 else mem
    mem_amount = ["-m", f"{mem}G"]
else:
    mem_amount = []
if "-smp" not in not_argparsed:
    cpus = int(cpu_count() * 0.4)
    cpus = 2 if cpus > 2 else cpus
    cpu_count = ["-smp", f"{cpus}"]
else:
    cpu_count = []

if argparsed.ports_passthrough:
    port_ssh = 9922
    port_http = 9980
    port_fwd = [
        "-nic",
        f"hostfwd=tcp:127.0.0.1:{port_ssh}-0.0.0.0:22,hostfwd=tcp:127.0.0.1:{port_http}-0.0.0.0:80",
    ]
else:
    port_fwd = []

# I assume you are using image with the same architecture as host
archs = {
    "x86_64": "x86_64",
    "arm64": "aarch64",
    "i386": "i386",
}
arch = archs[machine()]

os_families = {
    "linux": {
        "accel": ["-enable-kvm"],
        "bios_paths": [
            "/usr/share/ovmf/OVMF.fd",
            "/usr/share/ovmf/x64/OVMF.fd",
            "/usr/share/edk2/ovmf/OVMF_CODE.fd",
            "./OVMF.fd",
        ],
    },
    "windows": {"accel": ["--accel", "whpx"], "bios_paths": ["./OVMF.fd"]},
    "darwin": None,
}

default_bios = []
os_family_info = os_families.get(os_family, default_bios)

if not os_family_info:
    raise NotImplementedError

accel = os_family_info["accel"]
bios = next(
    (path for path in os_family_info["bios_paths"] if os.path.isfile(path)),
    default_bios,
)

if argparsed.no_efi:
    bios = None

if "-f" in not_argparsed:
    vfat_index = not_argparsed.index("-f")
    if vfat_index < len(not_argparsed) - 1:
        vfat_folder = os.path.abspath(not_argparsed[vfat_index + 1])
        vfat_drive = [
            "-drive",
            f"file=fat:ro:{vfat_folder},index=9,format=raw,media=disk,if=virtio",
        ]
    else:
        print("Missing folder path for -f option.")
        exit()
else:
    vfat_drive = []

command = [
    sudo,
    [f"qemu-system-{arch}"],
    accel,
    cpu_count,
    mem_amount,
    [] if bios is None else ["-bios", bios],
    qemu_args,
    drive,
    port_fwd,
    vfat_drive,
    ["-snapshot"] if argparsed.snapshot else [],
]

command = [item for sublist in command for item in sublist]

print(*command)
if not argparsed.dry_run:
    run(command)

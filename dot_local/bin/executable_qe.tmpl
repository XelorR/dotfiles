#!{{ lookPath "python3" }}

import os
from platform import machine, system
from subprocess import run
from sys import argv
from multiprocessing import cpu_count

os_family = system().lower()
if os_family != "linux":
    from psutil import virtual_memory

usage = """Wrapper for qemu-system_x86_64 to simplify VM launching from command line.
It provides automatic image type detection, enables UEFI and acceleration if possible and provides some additional niceties, see below.

Usage: qe [image] (script options) (other qemu params)

Available script options:

-p          enable port forwarding
-u          select USB device (not implemented yet, TODO)
-f          FAT folder (provide path to folder)
-n          dry run

--no-efi    run without OVMF
--help      display this help message"""
options = ["-p", "-u", "-f", "--no-efi", "-n", "--help", "-f"]

if len(argv) < 2 or "--help" in argv:
    print(usage)
    exit()
elif len(argv) == 2:
    image = argv[1]
    other_params = []
else:
    image = argv[1]
    vfat_index = argv.index("-f") if "-f" in argv else None
    other_params = [
        o
        for i, o in enumerate(argv[2:], start=2)
        if o not in options and i != vfat_index and i != vfat_index + 1
    ]

if "-m" not in argv:
    if os_family == "windows":
        mem = int(virtual_memory()[0] / 1024 / 1024 / 1024 * 0.4)
    elif os_family == "linux":
        with open("/proc/meminfo") as f:
            mem = int(
                int(
                    next(
                        (
                            int(line.split()[1])
                            for line in f
                            if line.startswith("MemTotal")
                        )
                    )
                )
                / 1024
                / 1024
                * 0.4
            )
    mem = 4 if mem > 4 else mem
    mem_amount = ["-m", f"{mem}G"]
else:
    mem_amount = []
if "-smp" not in argv:
    cpus = int(cpu_count() * 0.4)
    cpus = 2 if cpus > 2 else cpus
    cpu_count = ["-smp", f"{cpus}"]
else:
    cpu_count = []

if image.endswith(".iso"):
    drive = ["-cdrom", image, "-boot", "d"]
else:
    formats = {
        "qcow2": "qcow2",
        "qed": "qed",
        "raw ": "raw ",
        "img": "raw",
        "vdi": "vdi",
        "vhd": "vpc",
        "vhdx": "vhdx",
        "vmdk": "vmdk",
        "vdi.vtoy": "vdi",
        "vhd.vtoy": "vpc",
    }
    format = [e for k, e in formats.items() if image.endswith(k)][0]
    drive = ["-drive", f"file={image},format={format},index=0,media=disk"]

if "-p" in argv:
    port_ssh = 9922
    port_http = 9980
    port_fwd = [
        "-nic",
        f"hostfwd=tcp:127.0.0.1:{port_ssh}-0.0.0.0:22,hostfwd=tcp:127.0.0.1:{port_http}-0.0.0.0:80",
    ]
else:
    port_fwd = []

# I assume you are using image with the same architecture as host
archs = {
    "x86_64": "x86_64",
    "arm64": "aarch64",
    "i386": "i386",
}
arch = archs[machine()]

if os_family == "linux":
    accel = ["-enable-kvm"]
    if os.path.isfile("/usr/share/ovmf/OVMF.fd"):
        bios = ["-bios", "/usr/share/ovmf/OVMF.fd"]
    elif os.path.isfile("/usr/share/ovmf/x64/OVMF.fd"):
        bios = ["-bios", "/usr/share/ovmf/x64/OVMF.fd"]
    elif os.path.isfile("/usr/share/edk2/ovmf/OVMF_CODE.fd"):
        bios = ["-bios", "/usr/share/edk2/ovmf/OVMF_CODE.fd"]
    elif os.path.isfile("./OVMF.fd"):
        bios = ["-bios", "./OVMF.fd"]
    else:
        bios = []
elif os_family == "windows":
    accel = ["--accel", "whpx"]
    if os.path.isfile("./OVMF.fd"):
        bios = ["-bios", "./OVMF.fd"]
    else:
        bios = []
elif os_family == "darwin":
    raise NotImplementedError
else:
    raise NotImplementedError
if "--no-efi" in argv:
    bios = []

if "-f" in argv:
    vfat_index = argv.index("-f")
    if vfat_index < len(argv) - 1:
        vfat_folder = os.path.abspath(argv[vfat_index + 1])
        vfat_drive = ["-drive", f"file=fat:rw:{vfat_folder},format=raw,media=disk"]
    else:
        print("Missing folder path for -f option.")
        exit()
else:
    vfat_drive = []

command = (
    [f"qemu-system-{arch}"]
    + accel
    + cpu_count
    + mem_amount
    + bios
    + vfat_drive
    + other_params
    + drive
    + port_fwd
)

print(" ".join([c for c in command]))
if "-n" not in argv:
    run(command)
